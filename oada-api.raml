#%RAML 0.8
---
# The MIT License (MIT)
# https://github.com/OADA/oada-api-spec/blob/master/LICENSE
title: Open Ag Data Alliance API
version: v0.2

baseUri: https://{rootUri}/{version}
baseUriParameters:
    rootUri:
        description: |
            The root URI for a particular implementation of OADA. This *MUST*
            include a domain and *MAY* include a path to allow coexistence with
            other REST APIs.
        example: api.oada.io, api.oada.io/OADA

documentation:
    -   title: Overview
        content: |
            The OADA API is intended to serve as a specification for all
            providers that desire to be OADA compliant. This API does not
            attempt to define or enforce a single industry data standard. The
            goal of this API is to enable interoperability between the many
            precision ag software systems and existing industry data types. By
            providing an extensible API that focuses on information exchange
            and facilitates data transformations, an open heterogeneous
            environment that supports many legacy, current, and future data
            formats can be embraced.
    -   title: Readme
        content: !include README.md
    -   title: License
        content: !include LICENSE

protocols: [ HTTPS ]
schemas:
    -   default-resource-data: !include |
            schema/default-resource-data.schema.json
securitySchemes:
    -   oauth_2_0:
            description: |
                OADA supports OAuth 2.0 for authenticating all API requests.
            type: OAuth 2.0
            describedBy:
                queryParameters:
                    access_token: &access_token
                        type: string
                        description: |
                            OAuth 2.0 token. Perfer the Authorization header
                        example: 0b79bab50daca910b000d4f1a2b675d604257e42
                headers:
                    Authorization: &authorization
                        description: |
                            Used to send a valid OAuth 2 access token. Do not
                            use with the "access_token" query string parameter.
                        example: |
                            Authorization: Bearer 0b79bab50daca910b000d4f1a2b675d604257e42
                responses:
                    401: &resp401
                        description: |
                            Bad or expired token. This can happen if the token
                            expired. To fix, you should re-authenticate the
                            user.
                    403: &resp403
                        description: |
                            Bad OAuth request (wrong consumer key, bad nonce,
                            expired timestamp...). Unfortunately,
                            re-authenticating the user won't help here.
            settings:
                authorizationUri: https://{rootUri}/oauth2/authorize
                accessTokenUri: https://{rootUri}/oauth2/token
                authorizationGrants: [ token ]

resourceTypes:
    -   _common:
            usage: |
                This should *NOT* be used for any actual resource. Attributes
                common across all methods should be defined here.
            get?: &_common
                description: |
                    **TODO**: Write Method Description
                securedBy: [ oauth_2_0 ]
                # Start Hack fix until secureBy works
                queryParameters:
                    access_token: *access_token
                # End Hack fix until secureBy works
                headers:
                    # Start Hack fix until secureBy works
                    Authorization: *authorization
                    # End Hack fix until secureBy works
                responses:
                    200?: &_resp200
                        description: |
                            OK. The request has succeeded. The information
                            returned with the response is dependent on the
                            method used in the request.
                        headers: &_commonHeaders
                            # Start Hack fix until secureBy works
                            401: *resp401
                            403: *resp403
                            # End Hack fix until secureBy works
                            X-Rate-Limit-Limit:
                                type: integer
                                required: true
                                description: |
                                    The maximum number of requests allowed per
                                    rate-limit window.
                                example: "X-Rate-Limit-Limit: 100"
                            X-Rate-Limit-Remaining:
                                type: integer
                                required: true
                                description: |
                                    The number of remaining requests allowed in
                                    the current rate-limit window.
                                example: "X-Rate-Limit-Remaining: 89"
                            X-Rate-Limit-Reset:
                                type: integer
                                required: true
                                description: |
                                    The number of UTC epoch seconds until the
                                    next rate-limit window begins.
                                example: "X-Rate-Limit-Reset: 124"
                    404?: &_resp404
                        description: |
                            Not Found. The server has not found anything
                            matching the Request-URI.
                        headers: *_commonHeaders
                    429: &_resp429
                        description: |
                            Too Many Requests. The request was rejected due to
                            rate limiting. The request was not processed to
                            determine its validity.
                        headers: *_commonHeaders
                        body:
                            application/json:
                                schema: !!null
            head?: *_common
            put?: *_common
            post?: *_common
            delete?: *_common
            patch?: *_common

    -   _commonGlue:
            usage: |
                This should NOT be used for any actual resource. Applies the
                common attributes to the supported methods. This is a glue
                layer needed because RAML does not support map merging. This
                level can be used to require attributes that are required for
                all resources.
            type: _common
            get?:
                headers:
                    Accept:
                        type: string
                        required: true
                        description: |
                            Used to specify certain media types which are
                            acceptable in the response.
                        example: 'Accept: application/json, application/xml'
                responses:
                    200: *_resp200
                    304: &_resp304
                        description: |
                            Not Modified. The result of the request is the same
                            as the cached version at the client.
                        headers: *_commonHeaders
                    400?: &_resp400
                        description: |
                            Bad Request. The request could not be understood by
                            the server due to malformed syntax.
                        headers: *_commonHeaders
            head?:
                responses:
                    204: &_resp204
                        description: |
                            No Content. Request was successful and there is no
                            content to return.
                        headers: *_commonHeaders
                    400?: *_resp400
            put?:
                responses:
                    200: *_resp200
                    201: &_resp201
                        description: |
                            Created. The request has been fulfilled and
                            resulted in a new resource being created.
                        headers: *_commonHeaders
                    400?: *_resp400
                    412: &_resp412
                        description: |
                            One or more of the preconditions given in the
                            request headers was not met. The request was not
                            fulfilled.
                        headers: *_commonHeaders
                    415?: &_resp415
                        description: |
                            Unsupported Media Type. The request contains a body
                            with an unsupported media type.
                        headers: *_commonHeaders
            post?:
                responses:
                    201: *_resp201
                    400?: *_resp400
                    415?: *_resp415
            delete?:
                responses:
                    204: *_resp204
                    409?: &_resp409
                        description: |
                            Conflict. The request could not be processed
                            because the resource state is either currently in
                            or would be left in a conflicted state.
                        headers: *_commonHeaders
            patch?:
                responses:
                    409: *_resp409
                    412: *_resp412

    -   _base:
            usage: |
                This should NOT be used for any actual resource. Attributes
                common to a certain method type across all resources should be
                defined here.
            type: _commonGlue
            get:
                headers:
                    If-None-Match:
                        type: string
                        required: false
                        description: |
                            Cached value received from the server in an `ETag`
                            header the last time a `GET` on this succeeded.
                            The server will use this to determine if the
                            resource has changed and decide whether to respond
                            with `304`.
                        example: 'If-None-Match: "686897696a7c876b7e"'
                responses:
                    200:
                        headers:
                            ETag: &etagHeader
                                type: string
                                required: true
                                description: |
                                    An opaque identifier assigned by
                                    the server to the specific version of the
                                    resource contained in this response.  The
                                    client can cache it for inclusion in a
                                    future conditional `GET` on this resource.
                                example: 'ETag: "686897696a7c876b7e"'
                            Content-Type: &contentTypeHeader
                                type: string
                                required: true
                                description: |
                                    An indicator of the media type of the
                                    response body.
                                example: 'Content-Type: application/json'
            head?:
                responses:
                    200:
                        headers:
                            ETag: *etagHeader 
            put?:
                headers:
                    Content-Type: *contentTypeHeader
                    Content-Length: &contentLengthHeader
                        required: true
                        type: integer
                        description: |
                            A Content-Length header is required to verify that
                            the entire transmission was received.
                    Content-MD5: &contentMD5Header
                        required: false
                        type: string
                        description: |
                            The optional Content-MD5 header is used to verify
                            the received resource is error free. The header is
                            defined in [RFC1864][RFC].
                            [RFC]: http://www.ietf.org/rfc/rfc1864.txt "RFC1864"
                    Content-Disposition?: &contentDispositionHeader
                        type: string
                        required: false
                        description: |
                            Can be used to specify, among other things, the
                            desired name of the resource to be created by this
                            request.  The headers usage in HTTP is defined in
                            [RFC6266][RFC].
                            [RFC]: http://www.ietf.org/rfc/rfc6266.txt "RFC6266"
                        example: |
                            Content-Disposition:
                            attachment; filename="field.shp"
                    If-Match: &ifMatchHeader
                        type: string
                        required: false
                        description: |
                            Cached value received from the server in an `ETag`
                            header the last time a `GET` on this resource
                            succeeded.  The server will use this to determine
                            if the resource has changed and decide whether to
                            respond with `412`.
                        example: 'If-Match: "686897696a7c876b7e"'
                responses:
                    201: &_locationHeader
                        headers:
                            Location:
                                type: string
                                required: true
                                description: |
                                    The maximum number of requests allowed per
                                    rate-limit window.
            post?:
                headers:
                    Content-Type: *contentTypeHeader
                    Content-Length: *contentLengthHeader
                    Content-MD5: *contentMD5Header
                    Content-Disposition?: *contentDispositionHeader
                responses:
                    201: *_locationHeader
            patch?:
                headers:
                    Content-Type: *contentTypeHeader
                    If-Match: *ifMatchHeader
                    Content-Length: *contentLengthHeader
                    Content-MD5: *contentMD5Header

    -   _basePatchable:
            type: _base
            usage: |
                This should NOT be used for any actual resource. Adds patch
                support to the `_base` type.
            patch:
            get:
                responses:
                    200:
                        headers:
                            Accept-Patch:
                                type: string
                                required: true
                                description: |
                                    Patch formats accepted, as defined in
                                    [RFC5789][RFC].
                                    [RFC]: http://www.ietf.org/rfc/rfc5789.txt "RFC5789"

    -   member:
            usage: |
                The base type for any member style resource.  For example,
                `/resources/{resourceId}/properties/{key}`.
            type: _basePatchable
            get:
            put:
            delete:

    -   collection:
            usage: |
                The base type for any collection style resource. For example,
                `/resources`.
            type: _base
            get:
                is: [ paginated: { defaultLimit: 100 }, filterable, expandable ]
            post:

    -   datum:
            usage: |
                The base type for any data type resource. For example,
                `/resources/{id}`.
            type: _basePatchable
            get:
            head:
            put:
            delete:

    -   reference:
            usage: |
                The base type for resources which reference an actual resource
                located elsewhere.
            type: _base
            get:
            delete:

    -   informational:
            usage: |
                The base type for any informational style resource. For
                example, how `/features/*` describes the available features in
                the implementation.
            type: _base
            get:
                is: [ paginated: { defaultLimit: 100 }, filterable ]

traits:
    -   paginated:
            queryParameters:
                offset:
                    type: integer
                    default: 0
                    minimum: 0
                    description: |
                        The collection index of the first item in this page.
                    example: 20
                limit:
                    type: integer
                    default: <<defaultLimit>>
                    minimum: 1
                    description: |
                        The number of items from the collection in this page.
                    example: 10
            responses:
                400:

    -   filterable:
            queryParameters:
                q:
                    type: string
                    required: false
                    description: |
                        TODO: The exact format of search queries is still under
                        development.
                    example:
            responses:
                400:

    -   expandable:
            queryParameters:
                _expand:
                    type: boolean
                    default: false
                    description: |
                        Expand any resource links to their actual resource.
            responses:
                400:

/resources:
    type: collection
    description: |
        Explore and manage resources in the data storage.
    get:
        description: |
            Returns a paginated collection of all resources owned by the
            currently authenticated user. The results can be limited by an
            optional query parameter filter.
        is: [ paginated: {defaultLimit: 100}, filterable ]
    post:
        description: |
            Uploads a new resource and returns the resulting document. 
        queryParameters:
            directoryIds: &directoryIds
                required: false
                type: string
                description: |
                    A comma separated list of directory ids that the resource 
                    will be added to after a successful upload. If directoryIds
                    is left empty, the resource will only be discoverable
                    through `/resource`. Invalid, non-existent, or improperly
                    formated directory ids will be ignored.
                example: 10, 2, 37
            name: &name
                required: false
                type: string
                description: |
                    The name of the resource after it is created. If this is
                    left blank then the Content-Disposition header will be
                    checked for a name. Otherwise, a name indicating it is
                    untitled will be given.
                example: farm.shp
        headers:
            Content-Disposition:
        body:
            multipart/form-data: &formUpload
                formParameters:
                    blob:
                        type: file 
                        required: true
                        description: |
                            The data blob to be uploaded.
            application/x-www-form-urlencoded: *formUpload
            "*/*":
        responses:
            201:
                headers:
                    X-OADA-Resource-Properties: &OADAResourceProperties
                        type: string
                        description: |
                            OADA resource properties that can not be directly
                            modified by the user. For example resource creation
                            time, modification time, format, create
                            user, etc.
            415:

    /{resourceId}:
        type: datum
        description: |
            Add, edit, and delete resources in storage.
        uriParameters:
            resourceId:
                type: string
                description: |
                    The id of this resource in the data storage.
        get:
            description: |
                Returns the contents of the given resource.
            responses:
                200:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                204:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                404:
        head:
            description: |
                Returns the headers for the given resource.
            responses:
                200:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                204:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                404:
        put:
            description: |
                Creates or Updates a resource with given resource id.
            headers:
              Content-Disposition:
            responses:
                200:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                201:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                400:
                404:
            queryParameters:
               directoryIds: *directoryIds
               name: *name
            body:
                multipart/form-data: *formUpload
                application/x-www-form-urlencoded: *formUpload
                "*/*":
        delete:
            description: |
                Deletes the specified resoruce and its associated data.
            responses:
                404:

        /blob:
            type: datum
            description: |
                 Binary contents of the resource.
            get:
                description: |
                    Returns the contents of the given resource's blob.
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    204:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    404:
            head:
                description: |
                    Returns the headers for the given resource's blob.
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    204:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    404:
            put:
                description: |
                    Creates or Updates a resource's blob.
                headers:
                  Content-Disposition:
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    201:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    400:
                    404:
                queryParameters:
                   directoryIds: *directoryIds
                   name: *name
                body:
                    multipart/form-data: *formUpload
                    application/x-www-form-urlencoded: *formUpload
                    "*/*":
            delete:
                description: |
                    Deletes the specified resources's blob.
                responses:
                    404:

        /data:
            type: collection
            description: |
                A per resource key-value store that can be used to store any
                user generated data
            get:
                description: |
                    Returns the key-value store.
                responses:
                    404:
            post:
                description: |
                    Adds a single or set of key-value pairs to the store.
                body:
                    application/json:
                        schema: !!null
                responses:
                    400:
                    404:
                    415:

            /{key}:
                type: member
                description: |
                    Create, Update, and Delete the values of the given key.
                uriParameters:
                    key:
                        type: string
                        description: |
                            Key in the given resource data keystore.
                get:
                    description: |
                        Returns the value of the given key.
                    responses:
                        200:
                            body:
                                application/json:
                                    schema: !!null
                        404:
                put:
                    description: |
                        Updates or Creates a value under the given key. If the
                        key already exists, the original value will be lost.
                    body:
                        application/json:
                            schema: !!null
                    responses:
                        400:
                        404:
                        415:
                delete:
                    description: |
                        Deletes the given key and its value.
                    responses:
                        404:

        /formats:
            type: informational
            get:
                description: |
                    Returns a collection of resource formats that the given 
                    resource can be returned as.
                body:
                    application/json:
                        schema: !!null
                responses:
                    404:

            /{format}:
                type: informational
                get:
                    description: |
                        Returns the referenced resource in the given format.
                    responses:
                        404:

        /parents:
            type: collection
            description: |
                Add, remove, and list directories that are parents to the
                given directory.
            get:
                description: |
                    Returns a paginated collection of all directories that are
                    parents to the given directory. The results can be limited
                    by an optional query parameter filter.
                is: [ paginated : {defaultLimit: 100}, filterable ]
                responses:
                    404:
            post:
                description: |
                    Adds a parent directory to the given directory.
                body:
                    application/json:
                        schema: !!null
                responses:
                    400:
                    404:
                    415:

            /{parentId}:
                type: reference
                uriParameters:
                    parentId:
                        type: string
                        description: |
                            The id of a folder resource containing this
                            resource.

        /children:
            type: collection
            description: |
                Add, remove, and list directories that are parents to the
                given directory.
            get:
                description: |
                    Returns a paginated collection of all directories that are
                    children of the given directory. The results can be limited
                    by an optional query parameter filter.
                is: [ paginated : {defaultLimit: 100}, filterable ]
                responses:
                    404:
            post:
                description: |
                    Adds a child directory to the given directory.
                    Returns `400` if adding a child to a resource with a blob.
                body:
                    application/json:
                        schema: !!null
                responses:
                    400:
                    404:
                    415:

            /{childId}:
                type: reference

        /permissions:
            type: collection
            description: |
                Add, remove, and list sharing permissions of this resource.

                There are three permission levels:

                - owner
                - reader
                - writer

                There are four permission types:

                - user - local user id
                - domain - all users of a particular identity provider
                - anyone - publicly available
                - group - user created grouping of other users (`/groups`)

            /{permissionId}:
                type: member

/configs:
    type: collection
    description: |
        Explore and manage farm configuration data such as fields, machines,
        etc. Eventually this data will help directly query resources. 
    get:
        description: |
            Returns a paginated collection of all fields owned by the currently
            authenticated user. The results can be limited by an optional query
            parameter filter.
        is: [ paginated: {defaultLimit: 100}, filterable ]
    post:
        description: |
            Creates a new field.
        body:
            application/json:
                schema: !!null
        responses:
            201:
                headers:
                    X-OADA-Fields-Metadata: &OADAFieldsMetadata
                        type: string
                        description: |
                            OADA field data that can not be directly
                            modified by the user. For example directory creation
                            time, directory modification time, create user, etc.
            400:
            415:

    /{configurationKey}: &_configurationKey
        type: member
        description: |
            Custom key heirachy that resloves a resource that is the
            configuration.
        get:
            description: |
                Returns the field resource.
            responses:
                200:
                    headers:
                        X-OADA-Fields-Metadata: *OADAFieldsMetadata
                    body:
                        application/json:
                            schema: !!null
                404:
        head:
            description:
                Returns the headers for the given field resource.
            responses:
                204:
                   headers:
                        X-OADA-Fields-Metadata: *OADAFieldsMetadata
                404:
        put:
            description: |
                Creates or Updates the field with the given id.
            body:
                application/json:
                    schema: !!null
            responses:
                200:
                    headers:
                        X-OADA-Fields-Metadata: *OADAFieldsMetadata
                201:
                    headers:
                        X-OADA-Fields-Metadata: *OADAFieldsMetadata
                400:
                404:
                415:
        delete:
            description: |
                Deletes the specified field.
            responses:
                404:

/users:
    type: collection
    description: |
        The list of all users known to the current user.

    /{userId}:
        type: member
        description: |
            A document describing various information about a given user.

/groups:
    type: collection
    description: |
        The list of all groups defined by the current user.

    /{groupId}:
        type: member
        description: |
            A document listing the user in a given group.

/authorizations:
    type: collection
    description: |
        The list of all active authorizations, e.g., tokens, for the current 
        user.

    /{authorizationId}:
        type: member
        description: |
            A document describing the details of a particular authorization.
            For example: assignee, scope, expiration time, etc.

/features:

    /resourceFormats:
        type: informational
        description: |
            Returns a list of supported resource formats.
        get:
            description: |
                Returns a paginated collection of all resource formats that are
                supported by the OADA implementation. The results can be limited
                by an optional query parameter filter.
            is: [ paginated: {defaultLimit: 100}, filterable ]
            responses:
                200:
            body:
                application/json:
                    schema: !include schema/supported-resource-formats.schema.json

        /{resourceFormatId}:

            /transforms:
                type: informational
                description: |
                    Returns a list of supported resource format transformations
                    that are supported by the OADA implementation. The results
                    can be limited by an optional query parameter filter.
                get:
                    description: |
                        Returns a paginated collection of all resource formats
                        transformations that are supported by the OADA
                        implementation. The results can be limited by an
                        optional query parameter filter.
                    is: [ paginated: {defaultLimit: 100}, filterable ]
                    responses:
                        200:
                            body:
                                application/json:
                                    schema: !include |
                                        schema/supported-resource-formats.schema.json

/.well-known:

    /oada-configuration:
        type: informational
        description: |
            JSON document used to discover the specific implementation's OADA
            configuration.

            See [RFC5785][RFC].
            [RFC]: http://www.ietf.org/rfc/rfc5785.txt "RFC5785"

    /openid-configuration:
        type: informational
        description: |
            Defined in [OpenID Connect Discovery 1.0][openid].
            [openid]: http://openid.net/specs/openid-connect-discovery-1_0.html#WellKnownContents "OpenID Connect Discovery 1.0"

