#%RAML 0.8
---
# The MIT License (MIT)
# https://github.com/OADA/oada-api-spec/blob/master/LICENSE
title: Open Ag Data Alliance
version: v0.2

baseUri: https://{rootUri}/{version}
baseUriParameters:
    rootUri:
        description: |
            The root URI for a particular implementation of OADA. This *MUST*
            include a domain and *MAY* include a path to allow coexistence with
            other REST APIs.
        example: api.oada.io, api.oada.io/OADA

documentation:
    -   title: Overview
        content: |
            The OADA API is intended to serve as a specification for all
            providers that desire to be OADA compliant. This API does not
            attempt to define or enforce a single industry data standard. The
            goal of this API is to enable interoperability between the many
            precision ag software systems and existing industry data types. By
            providing an extensible API that focuses on information exchange
            and facilitates data transformations, an open heterogeneous
            environment that supports many legacy, current, and future data
            formats can be embraced.
    -   title: Readme
        content: !include README.md
    -   title: License
        content: !include LICENSE

protocols: [ HTTPS ]
#schemas:
securitySchemes:
    -   oauth_2_0:
            description: |
                OADA supports OAuth 2.0 for authenticating all API requests.
            type: OAuth 2.0
            describedBy:
                queryParameters:
                    access_token: &access_token
                        type: string
                        description: |
                            OAuth 2.0 token. Perfer the Authorization header
                        example: 0b79bab50daca910b000d4f1a2b675d604257e42
                headers:
                    Authorization: &authorization
                        description: |
                            Used to send a valid OAuth 2 access token. Do not
                            use with the "access_token" query string parameter.
                        example: |
                            Authorization: Bearer 0b79bab50daca910b000d4f1a2b675d604257e42
                responses:
                    401: &resp401
                        description: |
                            Bad or expired token. This can happen if the token
                            expired. To fix, you should re-authenticate the
                            user.
                    403: &resp403
                        description: |
                            Bad OAuth request (wrong consumer key, bad nonce,
                            expired timestamp...). Unfortunately,
                            re-authenticating the user won't help here.
            settings:
                authorizationUri: https://{rootUri}/oauth2/authorize
                accessTokenUri: https://{rootUri}/oauth2/token
                authorizationGrants: [ token ]

resourceTypes: !include resource-types.raml

traits:
    -   paginated:
            queryParameters:
                offset:
                    type: integer
                    default: 0
                    minimum: 0
                    description: |
                        The collection index of the first item in this page.
                    example: 20
                limit:
                    type: integer
                    default: <<defaultLimit>>
                    minimum: 1
                    description: |
                        The number of items from the collection in this page.
                    example: 10
            responses:
                400:

    -   filterable:
            queryParameters:
                q:
                    type: string
                    required: false
                    description: |
                        TODO: The exact format of search queries is still under
                        development.
                    example:
                lastModified:
                    type: string
                    required: false
                    description: |
                        Find all elements that have been modified at or after
                        the given date.    
                    example: 1985-04-12T23:20:50.52Z
            responses:
                400:

    -   expandable:
            queryParameters:
                _expand:
                    type: boolean
                    default: false
                    description: |
                        Expand all document href properties to their actual
                        resource.
            responses:
                400:

/resources:
    type: collection
    description: |
        Explore and manage resources in the data storage.
    get:
        description: |
            Returns a paginated collection of all resources owned by the
            currently authenticated user. The results can be limited by an
            optional query parameter filter.
        is: [ paginated: {defaultLimit: 100}, filterable ]
        responses:
            200:
                headers:
                    X-OADA-Resource-Properties: &OADAResourceProperties
                        type: string
                        description: |
                            OADA resource properties that can not be directly
                            modified by the user. For example resource creation
                            time, modification time, format, create
                            user, etc.
                body: 
                    application/json: 
                        example: !include examples/resources/resources.get.json
    post:
        description: |
            Uploads a new resource and returns the resulting document. 
        queryParameters:
            directoryIds: &directoryIds
                required: false
                type: string
                description: |
                    A comma separated list of directory ids that the resource 
                    will be added to after a successful upload. If directoryIds
                    is left empty, the resource will only be discoverable
                    through `/resource`. Invalid, non-existent, or improperly
                    formated directory ids will be ignored.
                example: 10, 2, 37
            name: &name
                required: false
                type: string
                description: |
                    The name of the resource after it is created. If this is
                    left blank then the Content-Disposition header will be
                    checked for a name. Otherwise, a name indicating it is
                    untitled will be given.
                example: farm.shp
        headers:
            Content-Disposition:
        body:
            multipart/form-data: &formUpload
                formParameters:
                    blob:
                        type: file 
                        required: true
                        description: |
                            The data blob to be uploaded.
            application/x-www-form-urlencoded: *formUpload
            "*/*":
        responses:
            201:
                headers:
                    X-OADA-Resource-Properties: *OADAResourceProperties
            415:

    /{resourceId}:
        type: instance
        description: |
            Add, edit, and delete resources in storage.
        uriParameters:
            resourceId:
                type: string
                description: |
                    The id of this resource in the data storage.
        get:
            description: |
                Returns the contents of the given resource.
            responses:
                200:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                    body: 
                        application/json: 
                            example: !include examples/resources/resource.get.json
                204:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                404:
        head:
            description: |
                Returns the headers for the given resource.
            responses:
                200:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                204:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                404:
        put:
            description: |
                Creates or Updates a resource with given resource id.
            headers:
              Content-Disposition:
            responses:
                200:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                    body: 
                        application/json: 
                            example: !include examples/resources/resource.get.json
                201:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                400:
                404:
            queryParameters:
               directoryIds: *directoryIds
               name: *name
            body:
                multipart/form-data: *formUpload
                application/x-www-form-urlencoded: *formUpload
                "*/*":
        patch:
            description: |
                Patches a resource with given resource id.
            headers:
                Content-Disposition:
            responses:
                200:
                    headers:
                        X-OADA-Resource-Properties: *OADAResourceProperties
                    body: 
                        application/json: 
                            example: !include examples/resources/resource.get.json
        delete:
            description: |
                Deletes the specified resoruce and its associated data.
            responses:
                404:

        /data:
            type: datum
            description: |
                The raw data of the resource. It may be any type of blob. 

                However, if the blob is of a known format, for example, JSON or
                XML, and has a standard method of mapping portions of the data
                to a URI, such as, JSON Pointer and XML XPath, then you may
                request just portions of the document using the {key} parameter.
            get:
                description: |
                    Returns the raw resource data.
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-data.get.json
                    204:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    404:
            put:
                description: |
                    Creates or Updates the raw resource data.
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-data.get.json
                    201:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-data.get.json
            patch:
                description: |
                    Patches the raw resource data.
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-data.get.json

            /{key}:
                type: instance
                description: |
                    Create, Update, and Delete the values of the given key.

                    If the file format stored in ../data has a URI mapping,
                    e.g., JSON Pointer, XML XPath, etc, then {key} may be
                    replaced with with any valid URI to access only the
                    associated portion of the document.

                    If the file format stored in ../data does not have a URI
                    mapping, then {key} may not be used.
                uriParameters:
                    key:
                        type: string
                        description: |
                            Key in the given resource data keystore.
                get:
                    description: |
                        Returns the value of the given key.
                    responses:
                        200:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        204:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        400:
                        404:
                put:
                    description: |
                        Updates or Creates a value under the given key. If the
                        key already exists, the original value will be lost.

                        If the file format stored in ../data has a URI mapping,
                        e.g., JSON Pointer, XML XPath, etc, then {key} may be
                        replaced with with any valid URI to access only the
                        associated portion of the document.

                        If the file format stored in ../data does not have a URI
                        mapping, then {key} may not be used.
                    body:
                        application/json:
                            schema: !!null
                    responses:
                        200:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        201:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        400:
                        404:
                        415:
                patch:
                    description: |
                        Patches a value under the given key.

                        If the file format stored in ../data has a URI mapping,
                        e.g., JSON Pointer, XML XPath, etc, then {key} may be
                        replaced with with any valid URI to access only the
                        associated portion of the document.

                        If the file format stored in ../data does not have a URI
                        mapping, then {key} may not be used.
                    body:
                        application/json:
                            schema: !!null
                    responses:
                        200:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                post:
                    description: |
                        Adds a single or set of key-value pairs to the store.

                        If the file format stored in ../data has a URI mapping,
                        e.g., JSON Pointer, XML XPath, etc, then {key} may be
                        replaced with with any valid URI to access only the
                        associated portion of the document.

                        If the file format stored in ../data does not have a URI
                        mapping, then {key} may not be used.
                    body:
                        application/json:
                            schema: !!null
                    responses:
                        200:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        201:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        400:
                        404:
                        415:
                delete:
                    description: |
                        Deletes the given key and its value.

                        If the file format stored in ../data has a URI mapping,
                        e.g., JSON Pointer, XML XPath, etc, then {key} may be
                        replaced with with any valid URI to access only the
                        associated portion of the document.

                        If the file format stored in ../data does not have a URI
                        mapping, then {key} may not be used.
                    responses:
                        200:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        404:
                        400:

        /meta:
            type: datum
            description: |
                Document of metadata associated with the resource's data.
            get:
                description: |
                    Returns the value of the given meta data key.
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-meta.get.json
                    204:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    404:
            put:
                description: |
                    Creates or Updates the value of the given meta data key.
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-meta.get.json
                    201:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-meta.get.json
            patch:
                description: |
                    Patches the value of the given meta data key.
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-meta.get.json
            head:
                description: |
                    Returns the headers for the given resource's meta data.
                responses:
                    200:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    204:
                        headers:
                            X-OADA-Resource-Properties: *OADAResourceProperties
                    404:

            /{key}:
                type: instance
                description: |
                    Create, Update, and Delete the values of the given key.
                uriParameters:
                    key:
                        type: string
                        description: |
                            Key in the given resource data keystore.
                get:
                    description: |
                        Returns the value of the given key.
                    responses:
                        200:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        204:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        404:
                put:
                    description: 
                        Updates or Creates a value under the given key. If the
                        key already exists, the original value will be lost.
                    headers:
                        Content-Disposition:
                    responses:
                        200:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        201:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        400:
                        404:
                    queryParameters:
                        directoryIds: *directoryIds
                        name: *name
                    body:
                        multipart/form-data: *formUpload
                        application/x-www-form-urlencoded: *formUpload
                        "*/*":
                post:
                    description: |
                        Adds a single or set of key-value pairs to the store.
                    body:
                        application/json:
                            schema: !!null
                    responses:
                        200:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        201:
                            headers:
                                X-OADA-Resource-Properties: *OADAResourceProperties
                        400:
                        404:
                delete:
                    description: |
                        Deletes the given key and its value.
                    responses:
                        404:

        /formats:
            type: informational
            get:
                description: |
                    Returns a collection of resource formats that the given 
                    resource can be returned as.
                is: [ paginated : {defaultLimit: 100}, filterable, expandable ] 
                body:
                    application/json:
                        schema: !!null
                responses:
                    200:
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-formats.get.json
                    404:

        /parents:
            type: collection
            description: |
                Add, remove, and list directories that are parents to the
                given directory.
            get:
                description: |
                    Returns a paginated collection of all directories that are
                    parents to the given directory. The results can be limited
                    by an optional query parameter filter.
                is: [ paginated : {defaultLimit: 100}, filterable ]
                responses:
                    200:
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-parents.get.json
                    404:
            post:
                description: |
                    Adds a parent directory to the given directory.
                body:
                    application/json:
                        schema: !!null
                responses:
                    201:
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-parents-id.get.json
                    400:
                    404:
                    415:

            /{parentId}:
                type: reference
                uriParameters:
                    parentId:
                        type: string
                        description: |
                            The id of a folder resource containing this
                            resource.
                get:
                    responses:
                        200:
                            body: 
                                application/json: 
                                    example: !include examples/resources/resource-parents-id.get.json

        /children:
            type: collection
            description: |
                Add, remove, and list directories that are parents to the
                given directory.
            get:
                description: |
                    Returns a paginated collection of all directories that are
                    children of the given directory. The results can be limited
                    by an optional query parameter filter.
                is: [ paginated : {defaultLimit: 100}, filterable ]
                responses:
                    200:
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-children.get.json
                    404:
            post:
                description: |
                    Adds a child directory to the given directory.
                    Returns `400` if adding a child to a resource with a blob.
                body:
                    application/json:
                        schema: !!null
                responses:
                    201:
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-children-id.get.json
                    400:
                    404:
                    415:

            /{childId}:
                type: reference
                get:
                    description: |
                        Returns a document describing the given child.
                    responses:
                        200:
                            body: 
                                application/json: 
                                    example: !include examples/resources/resource-children-id.get.json

        /permissions:
            type: collection
            description: |
                Add, remove, and list sharing permissions of this resource.

                There are three permission levels:

                - owner
                - reader
                - writer

                There are four permission types:

                - user - local user id
                - domain - all users of a particular identity provider
                - anyone - publicly available
                - group - user created grouping of other users (`/groups`)
            get:
                description: |
                    Returns a paginated collection of all permissions associated
                    with the given directory. The results can be limited
                    by an optional query parameter filter.
                is: [ paginated : {defaultLimit: 100}, filterable ]
                responses:
                    200:
                        body: 
                            application/json: 
                                example: !include examples/resources/resource-permissions.get.json
                    404:
            post:
                description: |
                    Creates a permission for this resource.
                responses:
                    201:
                        body:
                            application/json:
                                example: !include examples/resources/resource-permissions-id.get.json

            /{permissionId}:
                type: datum
                get:
                    description: |
                        Returns the permission document associated with the 
                        given permission id.
                    responses:
                        200:
                            body: 
                                application/json: 
                                    example: !include examples/resources/resource-permissions-id.get.json
                        404:
                put:
                    description: |
                        Creates or Updates a permission document associated with
                        the given permission id.
                    responses:
                        200:
                            body: 
                                application/json: 
                                    example: !include examples/resources/resource-permissions-id.get.json
                        201:
                            body: 
                                application/json: 
                                    example: !include examples/resources/resource-permissions-id.get.json
                        404:
                patch:
                    description: |
                        Updates a permission document associated with
                        the given permission id.
                    responses:
                        200:
                            body: 
                                application/json: 
                                    example: !include examples/resources/resource-permissions-id.get.json
                        404:

/configs:
    type: collection
    description: |
        Explore and manage farm configuration data such as fields, machines,
        etc. Eventually this data will help directly query resources. 
    get:
        description: |
            Returns a paginated collection of all fields owned by the currently
            authenticated user. The results can be limited by an optional query
            parameter filter.
        is: [ paginated: {defaultLimit: 100}, filterable ]
        responses:
            200:
                body: 
                    application/json: 
                        example: !include examples/configs/configs.get.json
    post:
        description: |
            Creates a new field.
        body:
            application/json:
                schema: !!null
        responses:
            201:
                body: 
                    application/json: 
                        example: !include examples/configs/configs.get.json
            400:
            415:

    /{configurationKey}: &_configurationKey
        type: datum
        description: |
            Custom key heirachy that resloves a resource that is the
            configuration.
        get:
            description: |
                Returns the field resource.
            responses:
                200:
                    body:
                        application/json: 
                            example: !include examples/configs/configs-id.get.json
                404:
        head:
            description:
                Returns the headers for the given field resource.
            responses:
                204:
                404:
        put:
            description: |
                Creates or Updates the field with the given id.
            body:
                application/json:
                    schema: !!null
            responses:
                200:
                    body:
                        application/json: 
                            example: !include examples/configs/configs-id.get.json
                201:
                    body:
                        application/json: 
                            example: !include examples/configs/configs-id.get.json
                400:
                404:
                415:
        patch:
            description: |
                Updates the field with the given id.
            body:
                application/json:
                    schema: !!null
            responses:
                200:
                    body:
                        application/json: 
                            example: !include examples/configs/configs-id.get.json
                400:
                404:
                415:
        delete:
            description: |
                Deletes the specified field.
            responses:
                404:
/about:
    type: informational
    description: |
        A document that describes the current user and session.
    get:
        responses:
            200:
                body:
                    application/json:
                        example: !include examples/about/about.get.json

/users:
    type: collection
    description: |
        The list of all users known to the current user.
    get:
        responses:
            200:
                body:
                    application/json:
                        example: !include examples/users/users.get.json
    post:
        responses:
            201:
                body:
                    application/json:
                        example: !include examples/users/users.get.json

    /{userId}:
        type: datum
        description: |
            A document describing various information about a given user.
        get:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/users/users-id.get.json
        put:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/users/users-id.get.json
                201:
                    body:
                        application/json:
                            example: !include examples/users/users-id.get.json
        patch:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/users/users-id.get.json

/groups:
    type: collection
    description: |
        The list of all groups defined by the current user.
    get:
        responses:
            200:
                body:
                    application/json:
                        example: !include examples/groups/groups.get.json
    post:
        responses:
            201:
                body:
                    application/json:
                        example: !include examples/groups/groups.get.json

    /{groupId}:
        type: datum
        description: |
            A document listing the user in a given group.
        get:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/groups/groups-id.get.json
        put:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/groups/groups-id.get.json
                201:
                    body:
                        application/json:
                            example: !include examples/groups/groups-id.get.json
        patch:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/groups/groups-id.get.json

/authorizations:
    type: collection
    description: |
        The list of all active authorizations, e.g., tokens, for the current 
        user.
    get:
        responses:
            200:
                body:
                    application/json:
                        example: !include examples/authorizations/authorizations.get.json
    post:
        responses:
            201:
                body:
                    application/json:
                        example: !include examples/authorizations/authorizations.get.json

    /{authorizationId}:
        type: datum
        description: |
            A document describing the details of a particular authorization.
            For example: assignee, scope, expiration time, etc.
        get:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/authorizations/authorizations-id.get.json
        put:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/authorizations/authorizations-id.get.json
                201:
                    body:
                        application/json:
                            example: !include examples/authorizations/authorizations-id.get.json
        patch:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/authorizations/authorizations-id.get.json

/.well-known:

    /oada-configuration:
        type: informational
        description: |
            JSON document used to discover the specific implementation's OADA
            configuration.

            See [RFC5785][RFC].
            [RFC]: http://www.ietf.org/rfc/rfc5785.txt "RFC5785"
        get:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/well-known/oada-configuration.get.json

    /openid-configuration:
        type: informational
        description: |
            Defined in [OpenID Connect Discovery 1.0][openid].
            [openid]: http://openid.net/specs/openid-connect-discovery-1_0.html#WellKnownContents "OpenID Connect Discovery 1.0"
        get:
            responses:
                200:
                    body:
                        application/json:
                            example: !include examples/well-known/openid-configuration.get.json

